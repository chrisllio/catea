define([],function(){"use strict";var e=function(){var e=this;e.initialize=function(n){e._value=n,e._subscribers=[],e._beforeHandlers=[]},e._notify=function(n){n(e._value)},e.subscribe=function(n){var r=e._subscribers;if("function"!=typeof n)throw new Error("The subscriber must be a function.");return-1==r.indexOf(n)&&r.push(n),{dispose:function(){var e=r.indexOf(n);e>-1&&r.splice(e,1)},notify:function(){e._notify(n)}}},e.beforeChange=function(n){var r=e._beforeHandlers;if("function"!=typeof n)throw new Error("beforeChange handler must be a function.");return-1==r.indexOf(n)&&r.push(n),{dispose:function(){var e=r.indexOf(n);e>-1&&r.splice(e,1)}}},e.notifyAll=function(){for(var n=e._subscribers.length,r=0;r<n;r++)e._subscribers[r]._notify(this)},e._setValue=function(n){for(var r=e._beforeHandlers.length,i=0;i<r;i++)if(!e._beforeHandlers[i](n))return;e._value=n,e.notifyAll()},e._getValue=function(){return e._value}},n=[{name:"addTo",isChanger:!0},{name:"concat"},{name:"displace",isChanger:!0},{name:"indexOf"},{name:"join"},{name:"length"},{name:"push",isChanger:!0},{name:"pop",isChanger:!0},{name:"reverse",isChanger:!0},{name:"shift",isChanger:!0},{name:"slice",isChanger:!0},{name:"sort",isChanger:!0},{name:"splice",isChanger:!0},{name:"toLocaleString"},{name:"toString"},{name:"split"},{name:"unshift",isChanger:!0}];return{observable:function(n){var r=new e;r.initialize(n);var i=function(){if(!(arguments.length>0))return r._getValue();r._setValue(arguments[0])};for(var a in r)0!=a.indexOf("_")&&(i[a]=r[a]);return i},observableArray:function(e){if("object"!=typeof(e=e||[])||!("length"in e))throw new Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");for(var r=this.observable(e),i=n.length,a=0;a<i;a++){var t=n[a];"function"==typeof e[t.name]&&t.isChanger?r[t.name]=function(){r()[t.name].apply(r(),arguments),r.notifyAll()}:r[t.name]=r()[t.name]}return r}}});